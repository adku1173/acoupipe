acoupipe.datasets.experimental
==============================

.. py:module:: acoupipe.datasets.experimental

.. autoapi-nested-parse::

   Contains classes for the generation of microphone array datasets with experimentally acquired signals for acoustic testing applications.

       Currently, the following dataset generators are available:

       * :class:`DatasetMIRACLE`: A microphone array dataset generator, relying on measured spatial room impulse responses from the `MIRACLE`_ dataset and synthetic white noise signals.

   .. _measurement setup:

   .. figure:: ../../../../_static/msm_miracle.png
       :width: 750
       :align: center

       Measurement setup `R2` from the `MIRACLE`_ dataset.







Module Contents
---------------

.. py:class:: DatasetBase(config=None, tasks=1, logger=None)

   Bases: :py:obj:`traits.api.HasPrivateTraits`


   Base class for generating microphone array datasets with specified features and labels.

   .. attribute:: config

      Configuration object for dataset generation.

      :type: ConfigBase

   .. attribute:: tasks

      Number of parallel tasks for data generation. Defaults to 1 (sequential calculation).

      :type: int


   .. py:method:: get_feature_collection(features, f, num)

      Get the feature collection of the dataset.

      :returns: BaseFeatureCollection object.
      :rtype: BaseFeatureCollection



   .. py:method:: generate(features, split, size, f=None, num=0, start_idx=0, progress_bar=True)

      Generate dataset samples iteratively.

      :param features: List of features included in the dataset. The features "seeds" and "idx" are always included.
      :type features: list
      :param split: Split name for the dataset ('training', 'validation' or 'test').
      :type split: str
      :param size: Size of the dataset (number of source cases).
      :type size: int
      :param f: The center frequency or list of frequencies of the dataset. If None, all frequencies are included.
      :type f: float
      :param num: Controls the width of the frequency bands considered; defaults to
                  0 (single frequency line).

                  ===  =====================
                  num  frequency band width
                  ===  =====================
                  0    single frequency line
                  1    octave band
                  3    third-octave band
                  n    1/n-octave band
                  ===  =====================
      :type num: integer
      :param start_idx: Starting sample index (default is 0).
      :type start_idx: int, optional
      :param progress_bar: Whether to show a progress bar (default is True).
      :type progress_bar: bool, optional

      :Yields: **data** (*dict*) -- Generator that yields dataset samples as dictionaries containing the feature names as keys.

      .. rubric:: Examples

      Generate features iteratively.

      >>> from acoupipe.datasets.synthetic import DatasetSynthetic
      >>> # define the features
      >>> features = ["csm", "source_strength_analytic", "loc"]
      >>> f = 1000
      >>> num = 3
      >>> # generate the dataset
      >>> generator = DatasetSynthetic().generate(
              f=f, num=num, split="training", size=2, features=features)
      >>> # iterate over the dataset
      >>> for data in generator:
              print(data)



   .. py:method:: save_h5(features, split, size, name, f=None, num=0, start_idx=0, progress_bar=True)

      Save dataset to a HDF5 file.

      :param features: List of features included in the dataset. The features "seeds" and "idx" are always included.
      :type features: list
      :param split: Split name for the dataset ('training', 'validation' or 'test').
      :type split: str
      :param size: Size of the dataset (number of source cases).
      :type size: int
      :param name: Name of the HDF5 file.
      :type name: str
      :param f: The center frequency or list of frequencies of the dataset. If None, all frequencies are included.
      :type f: float
      :param num: Controls the width of the frequency bands considered; defaults to
                  0 (single frequency line).

                  ===  =====================
                  num  frequency band width
                  ===  =====================
                  0    single frequency line
                  1    octave band
                  3    third-octave band
                  n    1/n-octave band
                  ===  =====================
      :type num: integer
      :param start_idx: Starting sample index (default is 0).
      :type start_idx: int, optional
      :param progress_bar: Whether to show a progress bar (default is True).
      :type progress_bar: bool, optional

      :rtype: None

      .. rubric:: Examples

      Save features to a HDF5 file.

      >>> from acoupipe.datasets.synthetic import DatasetSynthetic
      >>> # define the features
      >>> features = ["csm", "source_strength_analytic", "loc"]
      >>> f = 1000
      >>> num = 3
      >>> # save the dataset
      >>> dataset = DatasetSynthetic().save_h5(
              f=f, num=num, split="training", size=10, features=features,name="/tmp/example.h5")



.. py:class:: BaseFeatureCollection

   Bases: :py:obj:`traits.api.HasPrivateTraits`


   BaseFeatureCollection base class for handling feature funcs.

   .. attribute:: feature_funcs

      List of feature_funcs.

      :type: list


   .. py:method:: add_feature_func(feature_func)

      Add a feature_func to the BaseFeatureCollection.

      :param feature_func: Feature to be added.
      :type feature_func: str



   .. py:method:: get_feature_funcs()

      Get all feature_funcs of the BaseFeatureCollection.

      :returns: List of feature_funcs.
      :rtype: list



.. py:class:: DatasetSyntheticConfig(**kwargs)

   Bases: :py:obj:`acoupipe.datasets.base.ConfigBase`


   Default Configuration class.

   .. attribute:: fs

      Sampling frequency in Hz.

      :type: float

   .. attribute:: signal_length

      Length of the source signals in seconds.

      :type: float

   .. attribute:: max_nsources

      Maximum number of sources.

      :type: int

   .. attribute:: min_nsources

      Minimum number of sources.

      :type: int

   .. attribute:: mode

      Type of CSM calculation method.

      :type: str

   .. attribute:: mic_pos_noise

      Apply positional noise to microphone geometry.

      :type: bool

   .. attribute:: mic_sig_noise

      Apply signal noise to microphone signals.

      :type: bool

   .. attribute:: snap_to_grid

      Snap source locations to grid.

      :type: bool

   .. attribute:: random_signal_length

      Randomize signal length (Default: uniformly sampled signal length [1s,10s]).

      :type: bool

   .. attribute:: fft_params

      FFT parameters with default items :code:`block_size=128`,
      :code:`overlap="50%"`, :code:`window="Hanning"` and :code:`precision="complex64"`.

      :type: dict

   .. attribute:: env

      Instance of acoular.Environment defining the environmental coditions,
      i.e. the speed of sound.

      :type: ac.Environment

   .. attribute:: mics

      Instance of acoular.MicGeom defining the microphone array geometry.

      :type: ac.MicGeom

   .. attribute:: noisy_mics

      a second instance of acoular.MicGeom defining the noisy microphone array geometry.

      :type: ac.MicGeom

   .. attribute:: obs

      Instance of acoular.MicGeom defining the observation point which is used as the
      reference position when calculating the source strength.

      :type: ac.MicGeom

   .. attribute:: grid

      Instance of acoular.RectGrid defining the grid on which the Beamformer calculates
      the source map and on which the targetmap feature is calculated.

      :type: ac.RectGrid

   .. attribute:: source_grid

      Instance of acoular.Grid. Only relevant if :attr:`snap_to_grid` is :code:`True`.
      Then, the source locations are snapped to this grid. Default is a copy of :attr:`grid`.

      :type: ac.Grid

   .. attribute:: beamformer

      Instance of acoular.BeamformerBase defining the beamformer used to calculate the sourcemap.

      :type: ac.BeamformerBase

   .. attribute:: steer

      Instance of acoular.SteeringVector defining the steering vector used to calculate the sourcemap.

      :type: ac.SteeringVector

   .. attribute:: freq_data

      Instance of acoular.PowerSpectra defining the frequency domain data. Only used if :attr:`mode` is
      :code:`welch`. Otherwise, an instance of :class:`acoupipe.datasets.spectra_analytic.PowerSpectraAnalytic`
      is used.

      :type: ac.PowerSpectra

   .. attribute:: fft_spectra

      Instance of acoular.FFTSpectra used to calculate the spectrogram data. Only used if :attr:`mode` is
      :code:`welch`.

      :type: ac.FFTSpectra

   .. attribute:: fft_obs_spectra

      Instance of acoular.PowerSpectra used to calculate the source strength at the observation point given in
      :attr:`obs`.

      :type: ac.PowerSpectra

   .. attribute:: signals

      List of signals.

      :type: list

   .. attribute:: sources

      List of sources.

      :type: list

   .. attribute:: mic_noise_signal

      Noise signal configuration object.

      :type: ac.SignalGenerator

   .. attribute:: mic_noise_source

      Noise source configuration object.

      :type: ac.UncorrelatedNoiseSource

   .. attribute:: micgeom_sampler

      Sampler that applies positional noise to the microphone geometry.

      :type: sp.MicGeomSampler

   .. attribute:: location_sampler

      Source location sampler that samples the locations of the sound sources.

      :type: sp.LocationSampler

   .. attribute:: rms_sampler

      Signal RMS sampler that samples the RMS values of the source signals.

      :type: sp.ContainerSampler

   .. attribute:: nsources_sampler

      Number of sources sampler.

      :type: sp.NumericAttributeSampler

   .. attribute:: mic_noise_sampler

      Microphone noise sampler that creates random uncorrelated noise at the microphones.

      :type: sp.ContainerSampler

   .. attribute:: signal_length_sampler

      Signal length sampler that samples the length of the source signals. Only used if :attr:`random_signal_length` is :code:`True`.

      :type: sp.ContainerSampler


   .. py:method:: get_sampler()

      Return dictionary containing the sampler objects of type :class:`acoupipe.sampler.BaseSampler`.

      this function has to be manually defined in a dataset subclass.
      It includes the sampler objects as values. The key defines the idx in the sample order.

      e.g.:
      >>> sampler = {
      >>>     0 : BaseSampler(...),
      >>>     1 : BaseSampler(...),
      >>>     ...
      >>> }

      :returns: dictionary containing the sampler objects
      :rtype: dict



.. py:function:: blockwise_transfer(ir, blocksize=None)

   Calculate the transfer function of an impulse response in a blockwise manner.

   :param ir: Impulse response.
   :type ir: ndarray, shape (n_channels,n_samples)
   :param blocksize: Block size for the FFT. The default is None which means that the blocksize is equal
                     to the length of the impulse response.
   :type blocksize: int, optional

   :returns: **tf** -- Power spectrum of the impulse response.
   :rtype: ndarray, shape (n_channels, n_samples)


.. py:function:: get_all_source_signals(source_list)

   Get all signals from a list of `acoular.SamplesGenerator` derived objects.

   :param source_list: list of `acoular.SamplesGenerator` derived objects
   :type source_list: list

   :returns: list of all `acoular.SignalGenerator` derived objects
   :rtype: list


.. py:function:: get_uncorrelated_noise_source_recursively(source)

   Recursively get all uncorrelated noise sources from a `acoular.TimeInOut` object.

   :param source: the source object
   :type source: instance of class `acoular.TimeInOut`

   :returns: list of all uncorrelated noise sources
   :rtype: list


.. py:class:: DatasetMIRACLE(srir_dir=None, scenario='A1', ref_mic_index=63, mode='welch', mic_sig_noise=True, random_signal_length=False, signal_length=5, min_nsources=1, max_nsources=10, tasks=1, config=None)

   Bases: :py:obj:`acoupipe.datasets.base.DatasetBase`


   A microphone array dataset generator using experimentally measured data.

   DatasetSynthetic relies on measured spatial room impulse responses (SRIRs) from the `MIRACLE`_ dataset.

   MIRACLE is a SRIR dataset explicitly designed for acoustic testing applications using a planar microphone array focused on a
   rectangular observation area. It consists of a total of 856, 128 captured spatial room impulse responses and dense spatial sampling of
   the observation area.

   The data generation process is similar to :class:`acoupipe.datasets.synthetic.DatasetSynthetic`, but uses measured
   transfer functions / impulse responses instead of analytic ones. Multi-source scenarios with possibly closing neighboring sources are
   realized by superimposing signals that have been convolved with the provided SRIRs.

   **Scenarios**

   The MIRACLE dataset provides SRIRs from different measurement setups with the same microphone array,
   which can be selected by the :code:`scenario` parameter.
   The underlying measurement setup for :code:`scenario="R2"` is shown in the `measurement setup`_ figure.

   .. list-table:: Available scenarios
       :header-rows: 1
       :widths: 5 10 10 10 10 10 10

       *   - Scenario
           - Download Size
           - Environment
           - c0
           - # SRIRs
           - Source-plane dist.
           - Spatial sampling
       *   - A1
           - 1.1 GB
           - Anechoic
           - 344.7 m/s
           - 4096
           - 73.4 cm
           - 23.3 mm
       *   - D1
           - 300 MB
           - Anechoic
           - 344.8 m/s
           - 4096
           - 73.4 cm
           - 5.0 mm
       *   - A2
           - 1.1 GB
           - Anechoic
           - 345.0 m/s
           - 4096
           - 146.7 cm
           - 23.3 mm
       *   - R2
           - 1.1 GB
           - Reflective Ground
           - 345.2 m/s
           - 4096
           - 146.7 cm
           - 23.3 mm


   **Default FFT parameters**

   The underlying default FFT parameters are:

   .. table:: FFT Parameters

       ===================== ========================================
       Sampling Rate         fs=32,000 Hz
       Block size            256 Samples
       Block overlap         50 %
       Windowing             von Hann / Hanning
       ===================== ========================================

   **Default randomized properties**

   Several properties of the dataset are randomized for each source case when generating the data. This includes the number of sources,
   their positions, and strength. Their respective distributions, are closely related to :cite:`Herold2017`.
   Uncorrelated white noise is added to the microphone channels by default. Note that the source positions are sampled from a grid
   according to the spatial sampling of the MIRACLE dataset.

   .. table:: Randomized properties

       ==================================================================   ===================================================
       No. of Sources                                                       Poisson distributed (:math:`\lambda=3`)
       Source Positions [m]                                                 Bivariate normal distributed (:math:`\sigma = 0.1688 d_a`)
       Source Strength (:math:`[{Pa}^2]` at reference position)               Rayleigh distributed (:math:`\sigma_{R}=5`)
       Relative Noise Variance                                              Uniform distributed (:math:`10^{-6}`, :math:`0.1`)
       ==================================================================   ===================================================

   .. rubric:: Example

   This is a quick example on how to use the :class:`acoupipe.datasets.experimental.DatasetMIRACLE` dataset for generation of source cases
   with multiple sources. First, import the class and instantiate. One can either specify the path, where the SRIR files from the MIRACLE_
   project are stored, or one can set `srir_dir=None`. The latter will download the corresponding SRIR dataset into a pre-defined cache directory determined
   by the `pooch` library.

   .. code-block:: python

       from acoupipe.datasets.experimental import DatasetMIRACLE

       srir_dir = None
       # srir_dir = <local path to the MIRACLE dataset>

       dataset = DatasetMIRACLE(scenario='A1', mode='wishart')

   Now, extract the :code:`sourcmap` feature iteratively with:

   .. code-block:: python

       dataset_generator = dataset.generate(size=10, f=2000, features=['sourcemap','loc','f'], split='training')

       data_sample = next(dataset_generator)

   And finally, plot the results:

   .. code-block:: python

       import acoular as ac
       import matplotlib.pyplot as plt
       import numpy as np

       extent = dataset.config.grid.extend()

       # sound pressure level
       Lm = ac.L_p(data_sample['sourcemap']).T
       Lm_max = Lm.max()
       Lm_min = Lm.max() - 20

       # plot sourcemap
       plt.figure()
       plt.title(f'Beamforming Map (f={data_sample["f"][0]} Hz, scenario={dataset.config.scenario})')
       plt.imshow(Lm, vmax=Lm_max, vmin=Lm_min, extent=extent, origin='lower')
       plt.colorbar(label='Sound Pressure Level (dB)')
       # plot source locations
       for loc in data_sample['loc'].T:
           plt.scatter(loc[0], loc[1])
       plt.xlabel('x (m)')
       plt.ylabel('y (m)')
       plt.show()

   The resulting plot for the different scenarios should look like this:

       .. figure:: ../../../../_static/exp_sourcemap_example.png
           :width: 750
           :align: center

   **Initialization Parameters**

   Initialize the DatasetMIRACLE object.

   Input parameters are passed to the DatasetMIRACLEConfig object, which creates
   all necessary objects for the simulation of microphone array data.

   :param srir_dir: Path to the directory where the SRIR files are stored. Default is None, which
                    sets the path to the `pooch.os_cache` directory. The SRIR files are downloaded from the
                    `MIRACLE`_ dataset if they are not found in the directory.
   :type srir_dir: str, optional
   :param scenario: Scenario of the dataset. Possible values are "A1", "D1", "A2", "R2".
   :type scenario: str, optional
   :param ref_mic_index: Index of the microphone that is used as reference observation point.
                         Default is 63, which is the index of the centermost microphone.
   :type ref_mic_index: int, optional
   :param mode: Mode of the dataset. Possible values are "analytic", "welch", "wishart".
                Default is "welch".
   :type mode: str, optional
   :param mic_sig_noise: Add uncorrelated noise to the microphone signals. Default is True.
   :type mic_sig_noise: bool, optional
   :param signal_length: Length of the signal in seconds. Default is 5.
   :type signal_length: float, optional
   :param min_nsources: Minimum number of sources per sample. Default is 1.
   :type min_nsources: int, optional
   :param max_nsources: Maximum number of sources per sample. Default is 10.
   :type max_nsources: int, optional
   :param tasks: Number of parallel processes. Default is 1.
   :type tasks: int, optional
   :param config: DatasetMIRACLEConfig object. Default is None, which creates a new DatasetMIRACLEConfig object.
   :type config: DatasetMIRACLEConfig, optional


   .. py:method:: get_feature_collection(features, f, num)

      Get the feature collection of the dataset.

      :returns: BaseFeatureCollection object.
      :rtype: BaseFeatureCollection



.. py:class:: MIRACLEFeatureCollectionBuilder

   Bases: :py:obj:`acoupipe.datasets.synthetic.DatasetSyntheticFeatureCollectionBuilder`


   BaseFeatureCollectionBuilder base class for building a BaseFeatureCollection.

   .. attribute:: feature_collection

      BaseFeatureCollection object.

      :type: BaseFeatureCollection


.. py:class:: DatasetMIRACLEConfig(**kwargs)

   Bases: :py:obj:`acoupipe.datasets.synthetic.DatasetSyntheticConfig`


   Configuration class for the DatasetMIRACLE dataset.


   .. py:method:: set_filename()

      Set the filename of the SRIR file according to the scenario and srir_dir.



   .. py:method:: get_sampler()

      Return dictionary containing the sampler objects of type :class:`acoupipe.sampler.BaseSampler`.

      this function has to be manually defined in a dataset subclass.
      It includes the sampler objects as values. The key defines the idx in the sample order.

      e.g.:
      >>> sampler = {
      >>>     0 : BaseSampler(...),
      >>>     1 : BaseSampler(...),
      >>>     ...
      >>> }

      :returns: dictionary containing the sampler objects
      :rtype: dict



