acoupipe.writer
===============

.. py:module:: acoupipe.writer

.. autoapi-nested-parse::

   Provides classes to store the data extracted by :class:`~acoupipe.pipeline.BasePipeline` derived classes.

   Purpose of the Writer Module
   ----------------------------
   The :code:`writer.py` module provides classes to store the data extracted by the pipeline.
   The current implementation includes classes to save data in a container-like file format (.h5 file with the :code:`WriteH5Dataset` class) or
   binary format (.tfrecord file with the :code:`WriteTFRecord` class).
   The latter can be efficiently consumed by the Tensorflow framework for machine learning.

   .. code-block:: python

       file_writer = acoupipe.writer.WriteH5Dataset(
                   source=pipeline,
                   )

       file_writer.save()






Module Contents
---------------

.. py:class:: DataGenerator

   Bases: :py:obj:`traits.api.HasPrivateTraits`


   Abstract base class that serves as a data generator.

   This class should not be used.


   .. py:method:: get_data()

      Python generator that iteratively yields data set samples as a dictionary.

      :rtype: Dictionary containing a sample of the data set {feature_name[key],feature[values]}.



.. py:class:: BaseWriteDataset

   Bases: :py:obj:`acoupipe.pipeline.DataGenerator`


   Base class intended to write data from :class:`~acoupipe.pipeline.BasePipeline` instances to a specific file format.

   This class has no functionality and should not be used.


   .. py:method:: save()

      Save data from a :class:`~acoupipe.pipeline.BasePipeline` instance specified at :attr:`source` to file.



   .. py:method:: get_data(progress_bar=True, start_idx=1)

      Python generator that saves source output data to file and passes the data to the next object.

      :param progress_bar: If True, a progress bar is shown.
      :type progress_bar: bool
      :param start_idx: Index of the first sample which is written to file.
      :type start_idx: int

      :returns: Dictionary containing a sample of the data set
                {feature_name[key] : feature[values]}.
      :rtype: dict



.. py:class:: WriteH5Dataset

   Bases: :py:obj:`BaseWriteDataset`


   Class intended to write data to a `.h5` file.


   .. py:method:: save(progress_bar=True, start_idx=1)

      Save the output of the :meth:`get_data()` method of :class:`~acoupipe.pipeline.BasePipeline` to .h5 file format.



   .. py:method:: get_data(progress_bar=True, start_idx=1)

      Python generator that saves the data passed by the source to a `*.h5` file and yields the data to the next object.

      :returns: Dictionary containing a sample of the data set
                {feature_name[key] : feature[values]}.
      :rtype: dict



